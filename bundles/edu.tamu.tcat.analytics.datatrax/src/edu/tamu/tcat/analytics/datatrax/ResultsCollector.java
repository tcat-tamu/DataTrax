package edu.tamu.tcat.analytics.datatrax;

/**
 * Supplied to a {@link WorkflowController} to collect the results generated from processing
 * a single input data instance. This object will be notified as results are made available 
 * from the data transformation operations implemented by the workflow.
 * 
 * <p>
 * Workflow execution may be performed asynchronously, so no gaurantee is made as to which 
 * thread this object will be invoked from. Implementations are expected to be threadsafe.
 * 
 */
public interface ResultsCollector<T>
{
   /**
    * Called to supply an object generated by executing the transformation workflow. This will
    * be notified whenever the workflow execution produces a data value that has been 
    * configured to be a final output of the workflow. 
    * 
    * @param key An object containing details of the transformation result including 
    *       information about the transformer that produced it, the original object being 
    *       processed and the result itself.
    */
   void handleResult(TranformationResult<T> result);
   
   /**
    * Called in the event of an error during the workflow execution. In general, errors are 
    * assumed to be unrecoverable and clients should expect an immediate call call to 
    * {@link #finished(), however, because data processing happens asynchronously, additional 
    * results may be supplied after an error is encountered.  
    * 
    * @param error Details of the error that occurred.
    */
   void handleError(ResultsCollector.TransformationError error);
   
   /**
    * Called to indicate that all processing has been completed and no more results (or errors)
    * will be supplied to the collector.
    */
   void finished();
   
   /**
    * A final result of the workflow execution.  
    *
    */
   public static interface TranformationResult<SourceType>
   {
      DataValueKey getKey();
      
      Object getValue();
      
      SourceType getSource();
   }
   
   public static interface TransformationError
   {
      Exception getException();
   }
}