package edu.tamu.tcat.analytics.datatrax.config;

import java.util.Set;
import java.util.UUID;

import edu.tamu.tcat.analytics.datatrax.Transformer;
import edu.tamu.tcat.analytics.datatrax.TransformerRegistration;

public interface TransformerConfiguration
{
   /**
    * @return A unique identifier (within the context of this workflow) for this transformer. 
    */
   UUID getId();

   /**
    * @return The registration that defines the associated transformer. 
    */
   TransformerRegistration getRegistration();
   
   /**
    * @param key The key for the configuration parameter to retrieve.
    * @return The configuration parameter registered under the specified key. May be 
    *       {@code null} if no parameter has been registered for this key. 
    */
   Object getParameter(String key);
   
   /**
    * @param key The configuration parameter whose value should be returned.
    * @return The value of the identified configuration parameter as an {@code int}. If no value
    *       has been supplied for this field, this will return the value {@link Integer}May be 
    *       {@code null}. 
    * @throws FactoryConfigurationException If the value for identified parameter cannot be 
    *       converted into a {@code String}.  
    */
   int getIntParameter(String key) throws FactoryConfigurationException;
   
   /**
    * @param key The configuration parameter whose value should be returned.
    * @return The value of the identified configuration parameter as a {@code String}. May be 
    *       {@code null}. 
    * @throws FactoryConfigurationException If the value for identified parameter cannot be 
    *       converted into a {@code String}.  
    */
   double getDoubleParameter(String key) throws FactoryConfigurationException;
   
   /**
    * @param key The configuration parameter whose value should be returned.
    * @return The value of the identified configuration parameter as a {@code String}. May be 
    *       {@code null}. 
    * @throws FactoryConfigurationException If the value for identified parameter cannot be 
    *       converted into a {@code String}.  
    */
   String getStringParameter(String key) throws FactoryConfigurationException;
   
   /**
    * @return The keys for the configuration parameters that are defined for this 
    *       {@link Transformer}. Will not be {@code null}, may be an empty set if not parameters
    *       are defined. Note that, implementations may read configuration variables that are 
    *       not explicitly defined. 
    */
   Set<String> getDefinedParameters();
   
   /**
    * @return The input pins that are defined for this the associated transformer.
    */
   Set<DataInputPin> getDefinedInputs();
   
   /**
    * Indicates the {@link Transformer} whose output will be supplied as input to a specific 
    * data input pin on the {@code Transformer} defined by this configuration.
    * 
    * @param pin The input pin for which to retrieve the associated data source.
    * @return The identifier of the {@link TransformerConfiguration} that will provide the data
    *       to be contributed to the supplied input pin. May be {@code null} if no data source 
    *       has been defined for this input. 
    */
   UUID getDataSource(DataInputPin pin);
   
   /**
    * @return The Java type of objects generated by this transformer. 
    */
   Class<?> getOutputType();
}
