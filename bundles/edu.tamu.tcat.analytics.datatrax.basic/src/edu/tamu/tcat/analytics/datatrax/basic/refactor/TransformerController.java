package edu.tamu.tcat.analytics.datatrax.basic.refactor;

import java.util.concurrent.Callable;

/**
 * For each configured Transformer in a workflow, the {@link WorkflowExecutor}
 * creates a {@code TransformerController}. This controller registers listeners with the 
 * {@link ExecutionContext} that are notified when one of the data values that are stitched 
 * to a data input pin becomes available. Once all input data for a transformer is available, 
 * the {@code TransformerController} creates a {@code TransformerTask} and passes it to the 
 * {@link WorkflowExecutor} to be scheduled. Upon completion, the transformer task retrieves 
 * the output generated by the callable and stores it in the {@code ExecutionContext}. 
 *
 */
public class TransformerController
{

   public TransformerController()
   {
      // TODO Auto-generated constructor stub
   }
   
   private static class TransformerTask implements Callable<Object>
   {

      @Override
      public Object call() throws Exception
      {
         // TODO Auto-generated method stub
         return null;
      }
      
   }

}
